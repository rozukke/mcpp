<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classmcpp_1_1BlockType" xml:lang="en-US">
<title>mcpp::BlockType Class Reference</title>
<indexterm><primary>mcpp::BlockType</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classmcpp_1_1BlockType_1a15298507a87fc27fdf5caea40d08a2dd"/>constexpr <emphasis role="strong">BlockType</emphasis> (int id=0, int modifier=0)</para>
</listitem>
            <listitem><para>bool <link linkend="_classmcpp_1_1BlockType_1a7964fb92287d04581559534d0bff91a5">operator==</link> (const <link linkend="_classmcpp_1_1BlockType">BlockType</link> &amp;other) const</para>

<para>Equality comparison operator. </para>
</listitem>
            <listitem><para>bool <link linkend="_classmcpp_1_1BlockType_1a1b86156283c53bb60f74d504b6c7f78c">operator!=</link> (const <link linkend="_classmcpp_1_1BlockType">BlockType</link> &amp;other) const</para>

<para>Inequality comparison operator. </para>
</listitem>
            <listitem><para><link linkend="_classmcpp_1_1BlockType">BlockType</link> <link linkend="_classmcpp_1_1BlockType_1a3d66079415fa63e4c21af40436721844">withMod</link> (int modifier) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classmcpp_1_1BlockType_1a890900caaa1b3aff3084980ad4b7ae1f"/>int <emphasis role="strong">id</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classmcpp_1_1BlockType_1a7c3e209855431a7e02cc977f86dd53c5"/>int <emphasis role="strong">mod</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classmcpp_1_1BlockType_1a0563db037fac0a6d874f7077b10f8e34">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classmcpp_1_1BlockType">BlockType</link> &amp;block)</para>

<para>Stream insertion operator for outputting the <link linkend="_classmcpp_1_1BlockType">BlockType</link> to an output stream. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classmcpp_1_1BlockType_1a1b86156283c53bb60f74d504b6c7f78c"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>mcpp::BlockType</secondary></indexterm>
<indexterm><primary>mcpp::BlockType</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool mcpp::BlockType::operator!= (const <link linkend="_classmcpp_1_1BlockType">BlockType</link> &amp; other) const</computeroutput></para><para>

<para>Inequality comparison operator. </para>
</para>

<para>Watch out as this also compares the BlockType.mod element of the block, so some equalities may behave in unexpected ways e.g. rotated stairs</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>The <link linkend="_classmcpp_1_1BlockType">BlockType</link> to compare with the current instance. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the two <link linkend="_classmcpp_1_1BlockType">BlockType</link> instances are not equal, false otherwise. </para>
</formalpara>
</para>
    </section><anchor xml:id="_classmcpp_1_1BlockType_1a7964fb92287d04581559534d0bff91a5"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>mcpp::BlockType</secondary></indexterm>
<indexterm><primary>mcpp::BlockType</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool mcpp::BlockType::operator== (const <link linkend="_classmcpp_1_1BlockType">BlockType</link> &amp; other) const</computeroutput></para><para>

<para>Equality comparison operator. </para>
</para>

<para>Watch out as this also compares the BlockType.mod element of the block, so some equalities may behave in unexpected ways e.g. rotated stairs</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>The <link linkend="_classmcpp_1_1BlockType">BlockType</link> to compare with the current instance.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the two <link linkend="_classmcpp_1_1BlockType">BlockType</link> instances are not equal, false otherwise. </para>
</formalpara>
</para>
    </section><anchor xml:id="_classmcpp_1_1BlockType_1a3d66079415fa63e4c21af40436721844"/>    <section>
    <title>withMod()</title>
<indexterm><primary>withMod</primary><secondary>mcpp::BlockType</secondary></indexterm>
<indexterm><primary>mcpp::BlockType</primary><secondary>withMod</secondary></indexterm>
<para><computeroutput><link linkend="_classmcpp_1_1BlockType">BlockType</link> mcpp::BlockType::withMod (int modifier) const</computeroutput></para>
<para>Returns a new <link linkend="_classmcpp_1_1BlockType">BlockType</link> with the same id and specified modifier, useful for rotations etc.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>modifier</entry>
                                <entry>
<para>New modifier for the <link linkend="_classmcpp_1_1BlockType">BlockType</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>New <link linkend="_classmcpp_1_1BlockType">BlockType</link> object with the specified modifier </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classmcpp_1_1BlockType_1a0563db037fac0a6d874f7077b10f8e34"/>    <section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>mcpp::BlockType</secondary></indexterm>
<indexterm><primary>mcpp::BlockType</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classmcpp_1_1BlockType">BlockType</link> &amp; block)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Stream insertion operator for outputting the <link linkend="_classmcpp_1_1BlockType">BlockType</link> to an output stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>The output stream to write to. </para>
</entry>
                            </row>
                            <row>
                                <entry>block</entry>
                                <entry>
<para>The <link linkend="_classmcpp_1_1BlockType">BlockType</link> instance to output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the output stream after the block information has been inserted. </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
include/mcpp/<link linkend="_block_8h">block.h</link></section>
</section>
